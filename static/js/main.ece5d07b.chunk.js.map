{"version":3,"sources":["components/Header/Header.jsx","components/RepresentationOfKey/RepresentationOfKey.jsx","components/RepresentationOfValue/RepresentationOfValue.jsx","components/JsonItem/JsonItem.jsx","JsonRepresentation.js","serviceWorker.js","index.js"],"names":["Header","initialUrlInput","fetchJson","isLoading","useState","urlInput","setUrlInput","useEffect","className","data-testid","type","value","onChange","e","target","onClick","formatKey","keyOfNode","RepresentationOfKey","typeOfJsonValue","open","setOpen","jsonValue","Object","keys","length","JsonItemArrayWrapper","map","item","index","key","JsonItemObjectWrapper","BooleanProperty","NumberProperty","StringProperty","ObjectProperty","isArray","Array","RepresentationOfValue","boolean","string","number","object","JsonItem","JsonRepresentation","jsonResponse","setJsonResponse","setIsLoading","error","setError","inputValue","fetch","then","res","json","catch","finally","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console","message"],"mappings":"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","file":"static/js/main.ece5d07b.chunk.js","sourcesContent":["import React, { useState,useEffect } from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ initialUrlInput, fetchJson, isLoading }) => {\r\n  \r\n  const [urlInput, setUrlInput] = useState(\"\");\r\n\r\n  useEffect(() => {\r\n    setUrlInput(initialUrlInput);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"header\" data-testid=\"header\">\r\n      <div>URL:</div>\r\n      <input className=\"header__input\" type=\"text\" value={urlInput} onChange={(e) => setUrlInput(e.target.value)} />\r\n      <button\r\n        onClick={() => {\r\n          fetchJson(urlInput);\r\n        }}\r\n      >\r\n        {isLoading ? <div className=\"spinner\">üßô‚Äç‚ôÇÔ∏è</div> : \"Fetch JSON\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./RepresentationOfKey.css\";\r\n\r\nconst formatKey = (keyOfNode) => (keyOfNode || keyOfNode === 0 ? `${keyOfNode} : ` : \"\");\r\n\r\nexport const RepresentationOfKey = ({ typeOfJsonValue, open, setOpen, keyOfNode, jsonValue }) =>\r\n  typeOfJsonValue === \"object\" && jsonValue !== null && Object.keys(jsonValue).length > 0 ? (\r\n    <span onClick={() => setOpen(!open)} className=\"key\">\r\n      {`${open ? \"-\" : \"+\"} ${formatKey(keyOfNode)}`}\r\n    </span>\r\n  ) : (\r\n    <span>{formatKey(keyOfNode)}</span>\r\n  );\r\n\r\nexport default RepresentationOfKey;\r\n","import React from \"react\";\r\nimport \"./RepresentationOfValue.css\";\r\nimport JsonItem from \"../JsonItem/JsonItem\";\r\n\r\nconst JsonItemArrayWrapper = ({ jsonValue }) => (\r\n  <>\r\n    <span className=\"value\">[</span>\r\n    {jsonValue.map((item, index) => (\r\n      <JsonItem key={index} keyOfNode={index} jsonValue={item} />\r\n    ))}\r\n    <span>]</span>\r\n  </>\r\n);\r\n\r\nconst JsonItemObjectWrapper = ({ jsonValue }) => (\r\n  <>\r\n    <span className=\"value\">{\"{\"}</span>\r\n    {Object.keys(jsonValue).map((key) => (\r\n      <JsonItem key={key} keyOfNode={key} jsonValue={jsonValue[key]} />\r\n    ))}\r\n    <span>{\"}\"}</span>\r\n  </>\r\n);\r\n\r\nconst BooleanProperty = ({jsonValue}) => <span className=\"boolean value\">{`${jsonValue ? 'True' : 'False'}`}</span>;\r\nconst NumberProperty = ({jsonValue}) => <span className=\"number value\">{jsonValue}</span>;\r\nconst StringProperty = ({jsonValue})  => <span className=\"string value\">{`\"${jsonValue}\"`}</span>;\r\nconst ObjectProperty = ({jsonValue,open})  => {\r\n  if (jsonValue === null) {\r\n    return <span className=\"null value\">(null)</span>;\r\n  } else {\r\n    const isArray = Array.isArray(jsonValue);\r\n    return open ? (\r\n      isArray ? (\r\n        <JsonItemArrayWrapper jsonValue={jsonValue} />\r\n      ) : (\r\n        <JsonItemObjectWrapper jsonValue={jsonValue} />\r\n      )\r\n    ) : (\r\n      <span className=\"object value\">{isArray ? `Array(${jsonValue.length})` : `Object(${Object.keys(jsonValue).length})`}</span>\r\n    );\r\n  }\r\n};\r\n\r\nexport const RepresentationOfValue = ({ typeOfJsonValue, open, jsonValue }) => {\r\n\r\n  const representationOfValueByTypes = {\r\n    boolean: <BooleanProperty jsonValue={jsonValue}/>,\r\n    string: <StringProperty jsonValue={jsonValue}/>,\r\n    number: <NumberProperty jsonValue={jsonValue}/>,\r\n    object: <ObjectProperty jsonValue={jsonValue} open={open}/>\r\n  };\r\n\r\n  return representationOfValueByTypes[typeOfJsonValue];\r\n};\r\n\r\nexport default RepresentationOfValue;\r\n","import React, { useState } from \"react\";\r\nimport \"./JsonItem.css\";\r\nimport RepresentationOfKey from \"../RepresentationOfKey/RepresentationOfKey\";\r\nimport RepresentationOfValue from \"../RepresentationOfValue/RepresentationOfValue\";\r\n\r\nconst JsonItem = ({ keyOfNode, jsonValue }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const typeOfJsonValue = typeof jsonValue;\r\n\r\n  return (\r\n    <div className=\"jsonItem\">\r\n      <RepresentationOfKey typeOfJsonValue={typeOfJsonValue} open={open} setOpen={setOpen} keyOfNode={keyOfNode} jsonValue={jsonValue}/>\r\n      <RepresentationOfValue typeOfJsonValue={typeOfJsonValue} open={open} jsonValue={jsonValue} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonItem;\r\n","import React, { useState } from 'react';\nimport Header from './components/Header/Header';\nimport './JsonRepresentation.css';\nimport JsonItem from './components/JsonItem/JsonItem'\n\nfunction JsonRepresentation({ initialUrlInput }) {\n\n  const [jsonResponse, setJsonResponse] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n  const [error, setError] = useState('');\n\n  const fetchJson = (inputValue) => {\n    setJsonResponse({});\n    setIsLoading(true);\n    setError('');\n\n    fetch(inputValue)\n      .then(res => res.json())\n      .then(res => setJsonResponse(res))\n      .catch(error => setError(\"ERROR : \" + error + ' --- please check that the url is valid'))\n      .finally(() => setIsLoading(false));\n  }\n\n  return (\n    <div className=\"jsonRepresentation\" >\n      <Header initialUrlInput={initialUrlInput} fetchJson={fetchJson} isLoading={isLoading} />\n      <div className=\"error\">{error}</div>\n      <div className=\"jsonHolder\">\n        {jsonResponse && Object.keys(jsonResponse).length > 0 && <JsonItem jsonValue={jsonResponse} />}\n      </div>\n    </div>\n  )\n}\n\nexport default JsonRepresentation;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport JsonRepresentation from './JsonRepresentation';\nimport * as serviceWorker from './serviceWorker';\n\nconst initialUrlInput = `https://archive.org/advancedsearch.php?q=subject:google+sheets&output=json`;\n\nReactDOM.render(\n  <React.StrictMode>\n    <JsonRepresentation initialUrlInput={initialUrlInput} />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}