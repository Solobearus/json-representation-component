{"version":3,"sources":["components/Header/Header.jsx","components/RepresentationOfKey/RepresentationOfKey.jsx","components/RepresentationOfValue/RepresentationOfValue.jsx","components/JsonItem/JsonItem.jsx","App.js","serviceWorker.js","index.js"],"names":["Header","urlInput","setUrlInput","fetchJson","loading","className","data-testid","type","value","onChange","e","target","onClick","RepresentationOfKey","typeOfJsonValue","open","setOpen","keyOfNode","JsonItemArrayWrapper","jsonValue","map","item","index","key","JsonItemObjectWrapper","Object","keys","RepresentationOfValue","string","number","object","isArray","Array","length","JsonItem","useState","App","jsonResponse","setJsonResponse","setLoading","inputValue","a","fetch","then","res","json","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.e8bd3456.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Header.css\";\r\n\r\nconst Header = ({ urlInput, setUrlInput, fetchJson, loading }) => {\r\n  return (\r\n    <div className=\"header\" data-testid=\"header\">\r\n      <div>URL:</div>\r\n      <input className=\"header__input\" type=\"text\" value={urlInput} onChange={(e) => setUrlInput(e.target.value)} />\r\n      <button\r\n        onClick={() => {\r\n          fetchJson(urlInput);\r\n        }}\r\n      >\r\n        {loading ? <div className=\"spinner\">üßô‚Äç‚ôÇÔ∏è</div> : \"Fetch JSON\"}\r\n      </button>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport \"./RepresentationOfKey.css\";\r\nexport const RepresentationOfKey = ({ typeOfJsonValue, open, setOpen, keyOfNode }) =>\r\n  typeOfJsonValue === \"object\" ? (\r\n    <span onClick={() => setOpen(!open)} className={\"key\"}>\r\n      {`${open ? \"-\" : \"+\"} ${keyOfNode || keyOfNode === 0 ? `${keyOfNode} : ` : \"\"}`}\r\n    </span>\r\n  ) : (\r\n    <span>{keyOfNode || keyOfNode === 0 ? `${keyOfNode} : ` : \"\"}</span>\r\n  );\r\n\r\nexport default RepresentationOfKey;\r\n","import React from \"react\";\r\nimport \"./RepresentationOfValue.css\";\r\nimport JsonItem from \"../JsonItem/JsonItem\";\r\n\r\nconst JsonItemArrayWrapper = ({ jsonValue }) => (\r\n  <>\r\n    <span className=\" value\">[</span>\r\n    {jsonValue.map((item, index) => (\r\n      <JsonItem key={index} keyOfNode={index} jsonValue={item} />\r\n    ))}\r\n    <span>]</span>\r\n  </>\r\n);\r\n\r\nconst JsonItemObjectWrapper = ({ jsonValue }) => (\r\n  <>\r\n    <span className=\"value\">{\"{\"}</span>\r\n    {Object.keys(jsonValue).map((key) => (\r\n      <JsonItem key={key} keyOfNode={key} jsonValue={jsonValue[key]} />\r\n    ))}\r\n    <span>{\"}\"}</span>\r\n  </>\r\n);\r\n\r\nexport const RepresentationOfValue = ({ typeOfJsonValue, open, jsonValue }) => {\r\n  const representationOfValueByTypes = {\r\n    string: () => <span className=\"string value\">{`\"${jsonValue}\"`}</span>,\r\n    number: () => <span className=\"number value\">{jsonValue}</span>,\r\n    object: () => {\r\n      if (jsonValue === null) {\r\n        return <span className=\"null value\">(null)</span>;\r\n      } else {\r\n        const isArray = Array.isArray(jsonValue);\r\n        return open ? (\r\n          isArray ? (\r\n            <JsonItemArrayWrapper jsonValue={jsonValue} />\r\n          ) : (\r\n            <JsonItemObjectWrapper jsonValue={jsonValue} />\r\n          )\r\n        ) : (\r\n          <span className=\"object value\">{isArray ? `Array(${jsonValue.length})` : `Object(${Object.keys(jsonValue).length})`}</span>\r\n        );\r\n      }\r\n    },\r\n  };\r\n\r\n  return representationOfValueByTypes[typeOfJsonValue]();\r\n};\r\n\r\nexport default RepresentationOfValue;\r\n","import React, { useState } from \"react\";\r\nimport \"./JsonItem.css\";\r\nimport RepresentationOfKey from \"../RepresentationOfKey/RepresentationOfKey\";\r\nimport RepresentationOfValue from \"../RepresentationOfValue/RepresentationOfValue\";\r\n\r\nconst JsonItem = ({ keyOfNode, jsonValue }) => {\r\n  const [open, setOpen] = useState(false);\r\n\r\n  const typeOfJsonValue = typeof jsonValue;\r\n\r\n  return (\r\n    <div className={\"jsonItem\"} data-testid=\"JsonItem\">\r\n      <RepresentationOfKey typeOfJsonValue={typeOfJsonValue} open={open} setOpen={setOpen} keyOfNode={keyOfNode} />\r\n      <RepresentationOfValue typeOfJsonValue={typeOfJsonValue} open={open} jsonValue={jsonValue} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default JsonItem;\r\n","import React, { useState } from 'react';\nimport Header from './components/Header/Header';\nimport './App.css';\nimport JsonItem from './components/JsonItem/JsonItem'\n\nfunction App() {\n\n  const [urlInput, setUrlInput] = useState('https://archive.org/advancedsearch.php?q=subject:google+sheets&output=json')\n  const [jsonResponse, setJsonResponse] = useState({});\n  const [loading, setLoading] = useState(false);\n\n  const fetchJson = async (inputValue) => {\n    setLoading(true);\n    await fetch(inputValue)\n      .then(res => res.json())\n      .then(res => setJsonResponse(res))\n    setLoading(false)\n  }\n\n  return (\n    <div className=\"App\" data-testid=\"App\">\n      <Header urlInput={urlInput} setUrlInput={setUrlInput} fetchJson={fetchJson} loading={loading} />\n      <div className=\"JsonHolder\">\n        {jsonResponse && Object.keys(jsonResponse).length > 0 && <JsonItem jsonValue={jsonResponse} />}\n      </div>\n    </div>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}